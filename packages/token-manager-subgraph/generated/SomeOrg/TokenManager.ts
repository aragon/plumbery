// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewVesting extends ethereum.Event {
  get params(): NewVesting__Params {
    return new NewVesting__Params(this);
  }
}

export class NewVesting__Params {
  _event: NewVesting;

  constructor(event: NewVesting) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vestingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RevokeVesting extends ethereum.Event {
  get params(): RevokeVesting__Params {
    return new RevokeVesting__Params(this);
  }
}

export class RevokeVesting__Params {
  _event: RevokeVesting;

  constructor(event: RevokeVesting) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vestingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nonVestedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ScriptResult extends ethereum.Event {
  get params(): ScriptResult__Params {
    return new ScriptResult__Params(this);
  }
}

export class ScriptResult__Params {
  _event: ScriptResult;

  constructor(event: ScriptResult) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get script(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get input(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get returnData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RecoverToVault extends ethereum.Event {
  get params(): RecoverToVault__Params {
    return new RecoverToVault__Params(this);
  }
}

export class RecoverToVault__Params {
  _event: RecoverToVault;

  constructor(event: RecoverToVault) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenManager__getVestingResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class TokenManager extends ethereum.SmartContract {
  static bind(address: Address): TokenManager {
    return new TokenManager("TokenManager", address);
  }

  hasInitialized(): boolean {
    let result = super.call("hasInitialized", "hasInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasInitialized", "hasInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  MAX_VESTINGS_PER_ADDRESS(): BigInt {
    let result = super.call(
      "MAX_VESTINGS_PER_ADDRESS",
      "MAX_VESTINGS_PER_ADDRESS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_VESTINGS_PER_ADDRESS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_VESTINGS_PER_ADDRESS",
      "MAX_VESTINGS_PER_ADDRESS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  spendableBalanceOf(_holder: Address): BigInt {
    let result = super.call(
      "spendableBalanceOf",
      "spendableBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(_holder)]
    );

    return result[0].toBigInt();
  }

  try_spendableBalanceOf(_holder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "spendableBalanceOf",
      "spendableBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(_holder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assignVested(
    _receiver: Address,
    _amount: BigInt,
    _start: BigInt,
    _cliff: BigInt,
    _vested: BigInt,
    _revokable: boolean
  ): BigInt {
    let result = super.call(
      "assignVested",
      "assignVested(address,uint256,uint64,uint64,uint64,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_start),
        ethereum.Value.fromUnsignedBigInt(_cliff),
        ethereum.Value.fromUnsignedBigInt(_vested),
        ethereum.Value.fromBoolean(_revokable)
      ]
    );

    return result[0].toBigInt();
  }

  try_assignVested(
    _receiver: Address,
    _amount: BigInt,
    _start: BigInt,
    _cliff: BigInt,
    _vested: BigInt,
    _revokable: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assignVested",
      "assignVested(address,uint256,uint64,uint64,uint64,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_start),
        ethereum.Value.fromUnsignedBigInt(_cliff),
        ethereum.Value.fromUnsignedBigInt(_vested),
        ethereum.Value.fromBoolean(_revokable)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEVMScriptExecutor(_script: Bytes): Address {
    let result = super.call(
      "getEVMScriptExecutor",
      "getEVMScriptExecutor(bytes):(address)",
      [ethereum.Value.fromBytes(_script)]
    );

    return result[0].toAddress();
  }

  try_getEVMScriptExecutor(_script: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEVMScriptExecutor",
      "getEVMScriptExecutor(bytes):(address)",
      [ethereum.Value.fromBytes(_script)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRecoveryVault(): Address {
    let result = super.call(
      "getRecoveryVault",
      "getRecoveryVault():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRecoveryVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRecoveryVault",
      "getRecoveryVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVesting(
    _recipient: Address,
    _vestingId: BigInt
  ): TokenManager__getVestingResult {
    let result = super.call(
      "getVesting",
      "getVesting(address,uint256):(uint256,uint64,uint64,uint64,bool)",
      [
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_vestingId)
      ]
    );

    return new TokenManager__getVestingResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_getVesting(
    _recipient: Address,
    _vestingId: BigInt
  ): ethereum.CallResult<TokenManager__getVestingResult> {
    let result = super.tryCall(
      "getVesting",
      "getVesting(address,uint256):(uint256,uint64,uint64,uint64,bool)",
      [
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_vestingId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TokenManager__getVestingResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  onTransfer(_from: Address, _to: Address, _amount: BigInt): boolean {
    let result = super.call(
      "onTransfer",
      "onTransfer(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_onTransfer(
    _from: Address,
    _to: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onTransfer",
      "onTransfer(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferableBalance(_holder: Address, _time: BigInt): BigInt {
    let result = super.call(
      "transferableBalance",
      "transferableBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_holder),
        ethereum.Value.fromUnsignedBigInt(_time)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferableBalance(
    _holder: Address,
    _time: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferableBalance",
      "transferableBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_holder),
        ethereum.Value.fromUnsignedBigInt(_time)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowRecoverability(_token: Address): boolean {
    let result = super.call(
      "allowRecoverability",
      "allowRecoverability(address):(bool)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBoolean();
  }

  try_allowRecoverability(_token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowRecoverability",
      "allowRecoverability(address):(bool)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  appId(): Bytes {
    let result = super.call("appId", "appId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_appId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("appId", "appId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ISSUE_ROLE(): Bytes {
    let result = super.call("ISSUE_ROLE", "ISSUE_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ISSUE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ISSUE_ROLE", "ISSUE_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getInitializationBlock(): BigInt {
    let result = super.call(
      "getInitializationBlock",
      "getInitializationBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getInitializationBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInitializationBlock",
      "getInitializationBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestingsLengths(param0: Address): BigInt {
    let result = super.call(
      "vestingsLengths",
      "vestingsLengths(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_vestingsLengths(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vestingsLengths",
      "vestingsLengths(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canPerform(_sender: Address, _role: Bytes, _params: Array<BigInt>): boolean {
    let result = super.call(
      "canPerform",
      "canPerform(address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromUnsignedBigIntArray(_params)
      ]
    );

    return result[0].toBoolean();
  }

  try_canPerform(
    _sender: Address,
    _role: Bytes,
    _params: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canPerform",
      "canPerform(address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromUnsignedBigIntArray(_params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getEVMScriptRegistry(): Address {
    let result = super.call(
      "getEVMScriptRegistry",
      "getEVMScriptRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getEVMScriptRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEVMScriptRegistry",
      "getEVMScriptRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ASSIGN_ROLE(): Bytes {
    let result = super.call("ASSIGN_ROLE", "ASSIGN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ASSIGN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ASSIGN_ROLE", "ASSIGN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  BURN_ROLE(): Bytes {
    let result = super.call("BURN_ROLE", "BURN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_BURN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("BURN_ROLE", "BURN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  canForward(_sender: Address, param1: Bytes): boolean {
    let result = super.call("canForward", "canForward(address,bytes):(bool)", [
      ethereum.Value.fromAddress(_sender),
      ethereum.Value.fromBytes(param1)
    ]);

    return result[0].toBoolean();
  }

  try_canForward(
    _sender: Address,
    param1: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canForward",
      "canForward(address,bytes):(bool)",
      [ethereum.Value.fromAddress(_sender), ethereum.Value.fromBytes(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kernel(): Address {
    let result = super.call("kernel", "kernel():(address)", []);

    return result[0].toAddress();
  }

  try_kernel(): ethereum.CallResult<Address> {
    let result = super.tryCall("kernel", "kernel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onApprove(param0: Address, param1: Address, param2: BigInt): boolean {
    let result = super.call(
      "onApprove",
      "onApprove(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_onApprove(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onApprove",
      "onApprove(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPetrified(): boolean {
    let result = super.call("isPetrified", "isPetrified():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPetrified(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPetrified", "isPetrified():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  MINT_ROLE(): Bytes {
    let result = super.call("MINT_ROLE", "MINT_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MINT_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MINT_ROLE", "MINT_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  maxAccountTokens(): BigInt {
    let result = super.call(
      "maxAccountTokens",
      "maxAccountTokens():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxAccountTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxAccountTokens",
      "maxAccountTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REVOKE_VESTINGS_ROLE(): Bytes {
    let result = super.call(
      "REVOKE_VESTINGS_ROLE",
      "REVOKE_VESTINGS_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_REVOKE_VESTINGS_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "REVOKE_VESTINGS_ROLE",
      "REVOKE_VESTINGS_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isForwarder(): boolean {
    let result = super.call("isForwarder", "isForwarder():(bool)", []);

    return result[0].toBoolean();
  }

  try_isForwarder(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isForwarder", "isForwarder():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AssignVestedCall extends ethereum.Call {
  get inputs(): AssignVestedCall__Inputs {
    return new AssignVestedCall__Inputs(this);
  }

  get outputs(): AssignVestedCall__Outputs {
    return new AssignVestedCall__Outputs(this);
  }
}

export class AssignVestedCall__Inputs {
  _call: AssignVestedCall;

  constructor(call: AssignVestedCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _start(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _cliff(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _vested(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _revokable(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class AssignVestedCall__Outputs {
  _call: AssignVestedCall;

  constructor(call: AssignVestedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class OnTransferCall extends ethereum.Call {
  get inputs(): OnTransferCall__Inputs {
    return new OnTransferCall__Inputs(this);
  }

  get outputs(): OnTransferCall__Outputs {
    return new OnTransferCall__Outputs(this);
  }
}

export class OnTransferCall__Inputs {
  _call: OnTransferCall;

  constructor(call: OnTransferCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnTransferCall__Outputs {
  _call: OnTransferCall;

  constructor(call: OnTransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferToVaultCall extends ethereum.Call {
  get inputs(): TransferToVaultCall__Inputs {
    return new TransferToVaultCall__Inputs(this);
  }

  get outputs(): TransferToVaultCall__Outputs {
    return new TransferToVaultCall__Outputs(this);
  }
}

export class TransferToVaultCall__Inputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferToVaultCall__Outputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _holder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class AssignCall extends ethereum.Call {
  get inputs(): AssignCall__Inputs {
    return new AssignCall__Inputs(this);
  }

  get outputs(): AssignCall__Outputs {
    return new AssignCall__Outputs(this);
  }
}

export class AssignCall__Inputs {
  _call: AssignCall;

  constructor(call: AssignCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AssignCall__Outputs {
  _call: AssignCall;

  constructor(call: AssignCall) {
    this._call = call;
  }
}

export class IssueCall extends ethereum.Call {
  get inputs(): IssueCall__Inputs {
    return new IssueCall__Inputs(this);
  }

  get outputs(): IssueCall__Outputs {
    return new IssueCall__Outputs(this);
  }
}

export class IssueCall__Inputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IssueCall__Outputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }
}

export class ForwardCall extends ethereum.Call {
  get inputs(): ForwardCall__Inputs {
    return new ForwardCall__Inputs(this);
  }

  get outputs(): ForwardCall__Outputs {
    return new ForwardCall__Outputs(this);
  }
}

export class ForwardCall__Inputs {
  _call: ForwardCall;

  constructor(call: ForwardCall) {
    this._call = call;
  }

  get _evmScript(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ForwardCall__Outputs {
  _call: ForwardCall;

  constructor(call: ForwardCall) {
    this._call = call;
  }
}

export class OnApproveCall extends ethereum.Call {
  get inputs(): OnApproveCall__Inputs {
    return new OnApproveCall__Inputs(this);
  }

  get outputs(): OnApproveCall__Outputs {
    return new OnApproveCall__Outputs(this);
  }
}

export class OnApproveCall__Inputs {
  _call: OnApproveCall;

  constructor(call: OnApproveCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnApproveCall__Outputs {
  _call: OnApproveCall;

  constructor(call: OnApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _transferable(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _maxAccountTokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ProxyPaymentCall extends ethereum.Call {
  get inputs(): ProxyPaymentCall__Inputs {
    return new ProxyPaymentCall__Inputs(this);
  }

  get outputs(): ProxyPaymentCall__Outputs {
    return new ProxyPaymentCall__Outputs(this);
  }
}

export class ProxyPaymentCall__Inputs {
  _call: ProxyPaymentCall;

  constructor(call: ProxyPaymentCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProxyPaymentCall__Outputs {
  _call: ProxyPaymentCall;

  constructor(call: ProxyPaymentCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RevokeVestingCall extends ethereum.Call {
  get inputs(): RevokeVestingCall__Inputs {
    return new RevokeVestingCall__Inputs(this);
  }

  get outputs(): RevokeVestingCall__Outputs {
    return new RevokeVestingCall__Outputs(this);
  }
}

export class RevokeVestingCall__Inputs {
  _call: RevokeVestingCall;

  constructor(call: RevokeVestingCall) {
    this._call = call;
  }

  get _holder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vestingId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RevokeVestingCall__Outputs {
  _call: RevokeVestingCall;

  constructor(call: RevokeVestingCall) {
    this._call = call;
  }
}
